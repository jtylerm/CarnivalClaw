//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mixpanel.detail {

public partial class Value : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Value(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Value obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Value() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MixpanelSDKPINVOKE.CSharp_delete_Value(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Value() : this(MixpanelSDKPINVOKE.CSharp_new_Value__SWIG_0(), true) {
  }

  public Value(int value) : this(MixpanelSDKPINVOKE.CSharp_new_Value__SWIG_1(value), true) {
  }

  public Value(double value) : this(MixpanelSDKPINVOKE.CSharp_new_Value__SWIG_2(value), true) {
  }

  public Value(float value) : this(MixpanelSDKPINVOKE.CSharp_new_Value__SWIG_3(value), true) {
  }

  public Value(string value) : this(MixpanelSDKPINVOKE.CSharp_new_Value__SWIG_4(value), true) {
    if (MixpanelSDKPINVOKE.SWIGPendingException.Pending) throw MixpanelSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public Value(bool value) : this(MixpanelSDKPINVOKE.CSharp_new_Value__SWIG_5(value), true) {
  }

  public Value(Value other) : this(MixpanelSDKPINVOKE.CSharp_new_Value__SWIG_6(Value.getCPtr(other)), true) {
    if (MixpanelSDKPINVOKE.SWIGPendingException.Pending) throw MixpanelSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public Value get(uint index, Value defaultValue) {
    Value ret = new Value(MixpanelSDKPINVOKE.CSharp_Value_get__SWIG_0(swigCPtr, index, Value.getCPtr(defaultValue)), true);
    if (MixpanelSDKPINVOKE.SWIGPendingException.Pending) throw MixpanelSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isValidIndex(uint index) {
    bool ret = MixpanelSDKPINVOKE.CSharp_Value_isValidIndex(swigCPtr, index);
    return ret;
  }

  public Value append(Value value) {
    Value ret = new Value(MixpanelSDKPINVOKE.CSharp_Value_append(swigCPtr, Value.getCPtr(value)), false);
    if (MixpanelSDKPINVOKE.SWIGPendingException.Pending) throw MixpanelSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Value get(string key, Value defaultValue) {
    Value ret = new Value(MixpanelSDKPINVOKE.CSharp_Value_get__SWIG_1(swigCPtr, key, Value.getCPtr(defaultValue)), true);
    if (MixpanelSDKPINVOKE.SWIGPendingException.Pending) throw MixpanelSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Value removeMember(string key) {
    Value ret = new Value(MixpanelSDKPINVOKE.CSharp_Value_removeMember(swigCPtr, key), true);
    if (MixpanelSDKPINVOKE.SWIGPendingException.Pending) throw MixpanelSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isMember(string key) {
    bool ret = MixpanelSDKPINVOKE.CSharp_Value_isMember(swigCPtr, key);
    if (MixpanelSDKPINVOKE.SWIGPendingException.Pending) throw MixpanelSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string toStyledString() {
    string ret = MixpanelSDKPINVOKE.CSharp_Value_toStyledString(swigCPtr);
    return ret;
  }

  public string asString() {
    string ret = MixpanelSDKPINVOKE.CSharp_Value_asString(swigCPtr);
    return ret;
  }

  public int asInt() {
    int ret = MixpanelSDKPINVOKE.CSharp_Value_asInt(swigCPtr);
    return ret;
  }

  public float asFloat() {
    float ret = MixpanelSDKPINVOKE.CSharp_Value_asFloat(swigCPtr);
    return ret;
  }

  public double asDouble() {
    double ret = MixpanelSDKPINVOKE.CSharp_Value_asDouble(swigCPtr);
    return ret;
  }

  public bool asBool() {
    bool ret = MixpanelSDKPINVOKE.CSharp_Value_asBool(swigCPtr);
    return ret;
  }

  public bool isNull() {
    bool ret = MixpanelSDKPINVOKE.CSharp_Value_isNull(swigCPtr);
    return ret;
  }

  public bool isBool() {
    bool ret = MixpanelSDKPINVOKE.CSharp_Value_isBool(swigCPtr);
    return ret;
  }

  public bool isInt() {
    bool ret = MixpanelSDKPINVOKE.CSharp_Value_isInt(swigCPtr);
    return ret;
  }

  public bool isIntegral() {
    bool ret = MixpanelSDKPINVOKE.CSharp_Value_isIntegral(swigCPtr);
    return ret;
  }

  public bool isDouble() {
    bool ret = MixpanelSDKPINVOKE.CSharp_Value_isDouble(swigCPtr);
    return ret;
  }

  public bool isNumeric() {
    bool ret = MixpanelSDKPINVOKE.CSharp_Value_isNumeric(swigCPtr);
    return ret;
  }

  public bool isString() {
    bool ret = MixpanelSDKPINVOKE.CSharp_Value_isString(swigCPtr);
    return ret;
  }

  public bool isArray() {
    bool ret = MixpanelSDKPINVOKE.CSharp_Value_isArray(swigCPtr);
    return ret;
  }

  public bool isObject() {
    bool ret = MixpanelSDKPINVOKE.CSharp_Value_isObject(swigCPtr);
    return ret;
  }

  public uint size() {
    uint ret = MixpanelSDKPINVOKE.CSharp_Value_size(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = MixpanelSDKPINVOKE.CSharp_Value_empty(swigCPtr);
    return ret;
  }

  public void clear() {
    MixpanelSDKPINVOKE.CSharp_Value_clear(swigCPtr);
  }

  public void resize(uint size) {
    MixpanelSDKPINVOKE.CSharp_Value_resize(swigCPtr, size);
  }

  public Value at(string key) {
    Value ret = new Value(MixpanelSDKPINVOKE.CSharp_Value_at__SWIG_0(swigCPtr, key), false);
    if (MixpanelSDKPINVOKE.SWIGPendingException.Pending) throw MixpanelSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Value at(int index) {
    Value ret = new Value(MixpanelSDKPINVOKE.CSharp_Value_at__SWIG_1(swigCPtr, index), false);
    return ret;
  }

  public void set(int x) {
    MixpanelSDKPINVOKE.CSharp_Value_set__SWIG_0(swigCPtr, x);
  }

  public void set(string x) {
    MixpanelSDKPINVOKE.CSharp_Value_set__SWIG_1(swigCPtr, x);
    if (MixpanelSDKPINVOKE.SWIGPendingException.Pending) throw MixpanelSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set(double x) {
    MixpanelSDKPINVOKE.CSharp_Value_set__SWIG_2(swigCPtr, x);
  }

  public void set(float x) {
    MixpanelSDKPINVOKE.CSharp_Value_set__SWIG_3(swigCPtr, x);
  }

  public void set(Value x) {
    MixpanelSDKPINVOKE.CSharp_Value_set__SWIG_4(swigCPtr, Value.getCPtr(x));
    if (MixpanelSDKPINVOKE.SWIGPendingException.Pending) throw MixpanelSDKPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
